package freakrware.wdd.server.resources;
import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;

import android.os.Environment;



public class Datenbank implements WDD_interface{
	
	{
        try {
            Class.forName("org.hsqldb.jdbcDriver");
        	
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }
	private static Connection dbVerbindung = null;
    
	private static String strsql = null;
	private static Statement stmt = null;
	
	public Datenbank(){
		
		initialisiern_datenbank();
		
	}
	
	private void initialisiern_datenbank() {
		 String newFolder = "/"+DB_FOLDER;
		 String extStorageDirectory = "";
		 if(Environment.getExternalStorageDirectory()!= null){
	     extStorageDirectory = Environment.getExternalStorageDirectory().toString();
	     }
	     File myNewFolder = new File(extStorageDirectory + newFolder);
	     myNewFolder.mkdir();
		
		File path = myNewFolder; 
	    File file = new File(path, DB_NAME);
	    String filepath = file.getAbsolutePath();
	    try {
	    	dbVerbindung = DriverManager.getConnection("jdbc:hsqldb:file:"+filepath+";ifexists=true", "SA", "");
	    	dbVerbindung.setAutoCommit(true);
	    	stmt = dbVerbindung.createStatement();
	    } catch (SQLException e) {
	    	System.out.println(e.getErrorCode());
	    	if(e.getErrorCode()==-465){
	    		try {
					dbVerbindung = DriverManager.getConnection("jdbc:hsqldb:file:"+file.getAbsolutePath()+"", "SA", "");
					dbVerbindung.setAutoCommit(true);
					stmt = dbVerbindung.createStatement();
					create_database();
				} catch (SQLException e1) {
					e1.printStackTrace();
				}
		    }
	    }
	    Runtime.getRuntime().addShutdownHook(new Thread() {
	        public void run() {
	            try {
	                if (!dbVerbindung.isClosed()) {
	                	dbVerbindung.close();
	                }
	            } catch (SQLException e) {
	                e.printStackTrace();
	            }
	        }
	    });
	}

private void create_database(){
	
	strsql = "CREATE TABLE Serien (SerienID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1)PRIMARY KEY, Serienname VARCHAR(255))"; 
	try {
		stmt.executeUpdate(strsql);
	} catch (SQLException e) {
		e.printStackTrace();
	}
	strsql = "CREATE TABLE Staffeln (StaffelnID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1)PRIMARY KEY, StaffelNr INTEGER)"; 
	try {
		stmt.executeUpdate(strsql);
	} catch (SQLException e) {
		e.printStackTrace();
	}
	strsql = "CREATE TABLE Episoden (EpisodenID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1)PRIMARY KEY, EpisodeNr INTEGER)"; 
	try {
		stmt.executeUpdate(strsql);
	} catch (SQLException e) {
		e.printStackTrace();
	}
	strsql = "CREATE TABLE Vorhanden (VorhandenID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1)PRIMARY KEY, Serie INTEGER, Staffel INTEGER,Episode INTEGER,"
				+ "Vorhanden BIT,Gesehen BIT DEFAULT FALSE NOT NULL,Datum TIMESTAMP,"
				+ "FOREIGN KEY (Serie) REFERENCES Serien (SerienID),"
				+ "FOREIGN KEY (Staffel) REFERENCES Staffeln (StaffelnID),"
				+ "FOREIGN KEY (Episode) REFERENCES Episoden (EpisodenID))"; 
	try {
		stmt.executeUpdate(strsql);
	} catch (SQLException e) {
		e.printStackTrace();
	}

}
	
static int ausgabe_serien_anzahl() {
	int SAnzahl=0;
	try
    {
    strsql= "SELECT SerienID FROM Serien";  
    ResultSet rs = stmt.executeQuery(strsql);
    while(rs.next())
    	{
        	SAnzahl++;
        }
    rs.close();    
    } catch(SQLException e)
    {
      System.exit(0);
    }
	return SAnzahl+1;
}

static ArrayList<String> ausgabe_staffel(String serie) {
	
	ArrayList<String> rück = new ArrayList<String>();;
	try
    {
    
	strsql= "SELECT DISTINCT Vorhanden.Staffel,Vorhanden.Serie "
			+ "FROM Vorhanden "
			+ "WHERE Vorhanden.Serie = '"+konvert_serienname_to_id(serie)+"'";

    ResultSet rs = stmt.executeQuery(strsql);
    while(rs.next())
    	{
        	rück.add(rs.getString("Vorhanden.Staffel"));
    	}
    rs.close();    
} catch(SQLException e)
    {
      System.exit(0);
    }
return rück;
}

static int ausgabe_vid(int Snr,int S,int E) {
	int VorhandenID=0;
	try
    {
    strsql= "SELECT VorhandenID FROM Vorhanden WHERE Serie = "+Snr+" AND Staffel = "+S+" AND Episode = "+E;  
    ResultSet rs = stmt.executeQuery(strsql);
    while(rs.next())
    	{
    	VorhandenID= Integer.parseInt(rs.getString("VorhandenID"));
        }
    rs.close();    
    } catch(SQLException e)
    {
      System.exit(0);
    }
	return VorhandenID;
}


public static String konvert_serien_id_to_name(int Sid){
	
	String Name = null;
	
	try
    {
    strsql= "SELECT SerienID,Serienname FROM Serien WHERE SerienID = "+ Sid;
    ResultSet rs = stmt.executeQuery(strsql);
    while(rs.next())
    	{
        	Name= rs.getString("Serienname");
    	}
    rs.close();    
    } catch(SQLException e)
    {
      System.exit(0);
    }
	return Name;
}
static boolean hinzufuegen_episode(int Snr,int S,int E) {
		
	int Nid=Snr;
	int Vid=0;
	boolean vorhanden=true;
	boolean Status = false;
	Timestamp date = new java.sql.Timestamp(Calendar.getInstance().getTime().getTime());
    try
    {
    strsql= "SELECT VorhandenID FROM Vorhanden WHERE Serie = "+ Snr+" AND Staffel = "+S+" AND Episode = "+E; 
    ResultSet rs = stmt.executeQuery(strsql);
    while(rs.next())
      	{
        	Vid = Integer.parseInt(rs.getString("VorhandenID"));
        	Status = false;
        }
    rs.close();
        if(Vid==0){
        	strsql= "INSERT INTO Vorhanden (Serie,Staffel,Episode,Vorhanden,Datum) VALUES ("+Nid+","+S+","+E+","+ vorhanden +",'"+date+"')"; 
            stmt.executeUpdate(strsql); 
            Status = true;
        }
    }    
    catch(SQLException e)
    {
      System.exit(0);
    }
	return Status;	
	}
public static void aendern_gesehen_status(int Nid, int S, int E,boolean value) {

	int Vid=0;
	boolean gesehen=false;
	try
    {
    strsql= "SELECT VorhandenID,Gesehen FROM Vorhanden WHERE Serie = "+ Nid+" AND Staffel = "+S+" AND Episode = "+E+" AND Vorhanden = True"; 
    ResultSet rs = stmt.executeQuery(strsql); 
   rs = stmt.executeQuery(strsql);
    while(rs.next())
      	{
        	Vid = Integer.parseInt(rs.getString("VorhandenID"));
        	gesehen = rs.getBoolean("Gesehen");
        }
    rs.close();
        	
    if(gesehen==value){	
	}
	else{
		strsql= "UPDATE Vorhanden SET Gesehen = "+value+" WHERE VorhandenID = "+Vid;
        stmt.executeUpdate(strsql);
	}
    }
    catch(SQLException e)
    {
      System.exit(0);
    }
}

public static boolean loeschen_serie(String inhalt) {
	boolean back = false;
	int Sid=0;
	try {
		strsql= "SELECT SerienID,Serienname FROM Serien WHERE Serienname = '"+ inhalt+"'"; 
		ResultSet rs = stmt.executeQuery(strsql);
		rs = stmt.executeQuery(strsql);
		while(rs.next())
      		{
        		Sid = Integer.parseInt(rs.getString("SerienID"));
      		}
		rs.close();
		if(Sid==0){
			back = false;
		}
		else{
			strsql = "DELETE FROM Vorhanden WHERE Serie = " + Sid; 
			stmt.executeUpdate(strsql);
			strsql = "DELETE FROM Serien WHERE SerienID = " + Sid; 
			stmt.executeUpdate(strsql);
			back = true;
		}
	} catch (SQLException e) {
		e.printStackTrace();
	}
	return back;
}
static ArrayList<String> ausgabe_episoden(String serie, int staffel) {
	
	ArrayList<String> rück = new ArrayList<String>();
	try
    {
    
	strsql= "SELECT DISTINCT Vorhanden.Episode,Vorhanden.Staffel,Vorhanden.Serie "
			+ "FROM Vorhanden "
			+ "WHERE Vorhanden.Serie = '"+konvert_serienname_to_id(serie)+"' AND Vorhanden.Staffel = "+staffel;
    
    ResultSet rs = stmt.executeQuery(strsql);
    while(rs.next())
    	{
        	rück.add(rs.getString("Vorhanden.Episode"));
    	}
    rs.close();    
    } catch(SQLException e)
    {
      System.exit(0);
    }
	return rück;
}

static ArrayList<String> ausgabe_serie() {
	
	ArrayList<String> rück = new ArrayList<String>();;
	try
    {

    strsql= "SELECT Serienname FROM Serien";

    ResultSet rs = stmt.executeQuery(strsql);
    while(rs.next())
    	{
        	rück.add(rs.getString("Serienname"));
    	}
    rs.close();    

    } catch(SQLException e)
    {
      System.out.println("DB-Verbindungsfehler: "+e);
      System.exit(0);
    }

	return rück;
}

public static int konvert_serienname_to_id(String Sid){
	
	int Name = 0;
	try
    {
    strsql= "SELECT SerienID,Serienname FROM Serien WHERE Serienname = '"+ Sid+"'";
    ResultSet rs = stmt.executeQuery(strsql);
    while(rs.next())
    	{
         	Name= Integer.parseInt(rs.getString("SerienID"));
    	}
    rs.close();    
    } catch(SQLException e)
    {
      System.out.println("DB-Verbindungsfehler: "+e);
      System.exit(0);
    }
	return Name;
}

public static boolean ausgabe_vorhanden(String serie, int staffel,int episode) {
	boolean rück = false;
	
	try
    {
    
	strsql= "SELECT Vorhanden.Vorhanden,Vorhanden.Staffel,Vorhanden.Serie,Vorhanden.Episode "
			+ "FROM Vorhanden "
			+ "WHERE Vorhanden.Serie = '"+konvert_serienname_to_id(serie)+"' AND Vorhanden.Staffel = "+staffel+" AND Vorhanden.Episode = "+episode;
    
    ResultSet rs = stmt.executeQuery(strsql);
    while(rs.next())
    	{
        	rück=rs.getBoolean("Vorhanden.Vorhanden");
    	}
    rs.close();    
                
    } catch(SQLException e)
    {
      System.exit(0);
    }
	return rück;
}

public static boolean ausgabe_gesehen(String serie, int staffel,int episode) {
	boolean rück = false;
	
	try
    {
    
	strsql= "SELECT Vorhanden.Gesehen,Vorhanden.Staffel,Vorhanden.Serie,Vorhanden.Episode "
			+ "FROM Vorhanden "
			+ "WHERE Vorhanden.Serie = '"+konvert_serienname_to_id(serie)+"' AND Vorhanden.Staffel = "+staffel+" AND Vorhanden.Episode = "+episode;
    
    ResultSet rs = stmt.executeQuery(strsql);
    while(rs.next())
    	{
        	rück=rs.getBoolean("Vorhanden.Gesehen");
    	}
    rs.close();    
    } catch(SQLException e)
    {
      System.exit(0);
    }
	return rück;
}

static int[] ausgabe_serien_ids() {
	int[] SAnzahl = new int[ausgabe_serien_anzahl()-1];
	int zähler=0;
	try
    {
    strsql= "SELECT SerienID FROM Serien";  
    ResultSet rs = stmt.executeQuery(strsql);
    while(rs.next())
    	{
        	SAnzahl[zähler]= Integer.parseInt(rs.getString("SerienID"));
    		zähler++;
    	}
    rs.close();    
    } catch(SQLException e)
    {
      System.exit(0);
    }
	return SAnzahl;
}

static int[] check_neue_folgen(int tage) {
	
	int zähler=0;
	
	Timestamp date = new java.sql.Timestamp(Calendar.getInstance().getTime().getTime());
	Timestamp zeitraum = new Timestamp(date.getTime()-(tage*24*60*60*1000));
	try
    {
    strsql= "SELECT Vorhanden.VorhandenID FROM Vorhanden WHERE Vorhanden.Datum > '"+zeitraum+"'";  
    ResultSet rs = stmt.executeQuery(strsql);
    while(rs.next())
    	{
        	zähler++;
    	}
    rs.close();    
    
    } catch(SQLException e)
    {
      System.exit(0);
    }
	int[] SAnzahl = new int[zähler];
	zähler=0;
	try
    {
    strsql= "SELECT Vorhanden.VorhandenID FROM Vorhanden WHERE Vorhanden.Datum > '"+zeitraum+"' ORDER BY Vorhanden.Datum ASC";  
    ResultSet rs = stmt.executeQuery(strsql);
    while(rs.next())
    	{
        	SAnzahl[zähler]= Integer.parseInt(rs.getString("VorhandenID"));
    		zähler++;
    	}
    rs.close();    
    } catch(SQLException e)
    {
      System.exit(0);
    }
	return SAnzahl;
}

public static ArrayList ausgabe_folge(int VID) {
	
	ArrayList rück = new ArrayList<String>();;
	try
    {
    
	strsql= "SELECT Vorhanden.Episode,Vorhanden.Staffel,Vorhanden.Serie,Vorhanden.Datum,Vorhanden.Gesehen,Vorhanden.Vorhanden "
			+ "FROM Vorhanden "
			+ "WHERE Vorhanden.VorhandenID = "+VID;
    
    ResultSet rs = stmt.executeQuery(strsql);
    while(rs.next())
    	{
        	rück.add(Integer.parseInt(rs.getString("Vorhanden.Serie")));
        	rück.add(Integer.parseInt(rs.getString("Vorhanden.Staffel")));
        	rück.add(Integer.parseInt(rs.getString("Vorhanden.Episode")));
        	rück.add(rs.getBoolean("Vorhanden.Vorhanden"));
        	rück.add(rs.getBoolean("Vorhanden.Gesehen"));
        	rück.add(rs.getDate("Vorhanden.Datum"));
    	}
    rs.close();    
    } catch(SQLException e)
    {
      System.exit(0);
    }
	return rück;
}

static int[] check_ungesehen() {
	
	int zähler=0;
	try
    {
    strsql= "SELECT VorhandenID FROM Vorhanden WHERE Gesehen = FALSE";  
    ResultSet rs = stmt.executeQuery(strsql);
    while(rs.next())
    	{
        	zähler++;
    	}
    rs.close();    
    
    } catch(SQLException e)
    {
      System.exit(0);
    }
	int[] SAnzahl = new int[zähler];
	zähler=0;
	try
    {
    strsql= "SELECT VorhandenID FROM Vorhanden WHERE Gesehen = FALSE"; 
    ResultSet rs = stmt.executeQuery(strsql);
    while(rs.next())
    	{
        	SAnzahl[zähler]= Integer.parseInt(rs.getString("VorhandenID"));
    		zähler++;
    	}
    rs.close();    
    } catch(SQLException e)
    {
      System.exit(0);
    }
	return SAnzahl;
}

static int[] check_alle_folgen() {
	
	int zähler=0;
	try
    {
    strsql= "SELECT Vorhanden.VorhandenID FROM Vorhanden";  
    ResultSet rs = stmt.executeQuery(strsql);
    while(rs.next())
    	{
        	zähler++;
    	}
    rs.close();    
    
    } catch(SQLException e)
    {
      System.exit(0);
    }
	int[] SAnzahl = new int[zähler];
	zähler=0;
	try
    {
    strsql= "SELECT Vorhanden.VorhandenID FROM Vorhanden"; 
    ResultSet rs = stmt.executeQuery(strsql);
    while(rs.next())
    	{
        	SAnzahl[zähler]= Integer.parseInt(rs.getString("VorhandenID"));
    		zähler++;
    	}
    rs.close();    
    } catch(SQLException e)
    {
      System.exit(0);
    }
	return SAnzahl;
}

public static ArrayList<String> ausgabe_serien_all() {
	ArrayList<String> rück = new ArrayList<String>();
	try
    {

    strsql= "SELECT Serienname FROM Serien";

    ResultSet rs = stmt.executeQuery(strsql);
    while(rs.next())
    	{
        	rück.add(rs.getString("Serienname"));
    	}
    rs.close();    

    } catch(SQLException e)
    {
      System.out.println("DB-Verbindungsfehler: "+e);
      System.exit(0);
    }

	return rück;
}

public static ArrayList<String> ausgabe_serien_neu(int tage) {
	
	Timestamp date = new java.sql.Timestamp(Calendar.getInstance().getTime().getTime());
	Timestamp zeitraum = new Timestamp(date.getTime()-(tage*24*60*60*1000));
	
	ArrayList<String> rück = new ArrayList<String>();
	try
    {
    strsql= "SELECT DISTINCT Serien.Serienname FROM Serien,Vorhanden WHERE Serien.SerienID = Vorhanden.Serie AND Vorhanden.Datum > '"+zeitraum+"'";  
    ResultSet rs = stmt.executeQuery(strsql);
    while(rs.next())
    	{
    	rück.add(rs.getString("Serienname"));
    	}
    rs.close();    
    } catch(SQLException e)
    {
      System.exit(0);
    }
	return rück;

}

public static ArrayList<String> ausgabe_serien_ungesehen() {
		
	ArrayList<String> rück = new ArrayList<String>();
	try
    {
    strsql= "SELECT DISTINCT Serien.Serienname FROM Serien,Vorhanden WHERE Serien.SerienID = Vorhanden.Serie AND Vorhanden.Gesehen = FALSE"; 
    ResultSet rs = stmt.executeQuery(strsql);
    while(rs.next())
    	{
        	rück.add(rs.getString("Serienname"));
        	
    	}
    rs.close();    
    } catch(SQLException e)
    {
      System.exit(0);
    }
	return rück;
}

}





